var __NNCONFIG = require('nn/config');exports.getGroups = function(){	var	curSession	= currentSession(),	res 		= [];		directory.internalStore.Group.forEach(function(){		if(currentSession.belongsTo()){			res.push();		}	})}exports.toCamelCase = function(str){	return require("formatting").formatString(str, "c");}// Fixes the attribute value (if it's a number it parses the parameters and return the correct value )exports.fixAttrValue = function(attr , value) {	switch(attr.type){		case 'number'	:		case 'long'		:			return parseInt(value);		default	:			return value;	}};exports.getConfig = function(dc1Name, dc2Name, toArray) {	var NN_RELATIONS = __NNCONFIG.RELATIONS,		arr = [];    	    	if(!ds[dc1Name]){  			return __NNCONFIG.ERRORS.CONFIG.noDCWithThatName;  	}  	  	if(arguments.length == 1){  		// Do nothing !  	}  	else if(arguments.length == 2 && !ds[dc2Name]){  		if(typeof dc2Name != 'boolean'){  			return __NNCONFIG.ERRORS.CONFIG.inexpectedParam;  		}  	}    else if(arguments.length == 2 && (!ds[dc1Name] || !ds[dc2Name])){    	return __NNCONFIG.ERRORS.CONFIG.noDCWithThatName;    }    	    for(var i in NN_RELATIONS){        var        obj 		= NN_RELATIONS[i],        relationDC	= ds[obj.RELATION_DC],        objDC1		= relationDC[obj.DC1.relatedAttribute],        objDC2		= relationDC[obj.DC2.relatedAttribute];                if(objDC1.kind != 'relatedEntity' || objDC2.kind != 'relatedEntity'){        	return __NNCONFIG.ERRORS.CONFIG.typeMismatch;        }          		if(arguments.length == 1){  			if(obj.RELATION_DC == dc1Name){  				return NN_RELATIONS[i];  			}	  		continue;	  	}	  		  	else if(arguments.length == 2 && typeof dc2Name == 'boolean'){	  		dc1Name = objDC2.relatedDataClass.getName();	  		dc2Name	= objDC1.relatedDataClass.getName();	  	}	  		  	else if(arguments.length == 3 && toArray === true){	  		if(objDC1.relatedDataClass.getName() == dc1Name || objDC2.relatedDataClass.getName() == dc1Name){  				arr.push(NN_RELATIONS[i]);  			}	  		continue;	  	}                if(objDC1.relatedDataClass.getName() == dc1Name && objDC2.relatedDataClass.getName() == dc2Name){        	return obj;        }                if(objDC1.relatedDataClass.getName() == dc2Name && objDC2.relatedDataClass.getName() == dc1Name){        	if(obj.reversed){        		return obj;        	}        	        	var	        dc1 = obj.DC1;				        obj.DC1 		= obj.DC2;	        obj.DC2 		= dc1;	        	        var	        errs	= obj.ERRORS,	        errDC1 	= errs.DC1Empty;	        	        errs.DC1Empty	= errs.DC2Empty;	        errs.DC2Empty	= errDC1;	        	        obj.reversed	= true;				        return obj;        }    }    if(arr.length >= 0){    	return arr;    }	    return __NNCONFIG.ERRORS.CONFIG.noNNRelation;};exports.syncDirectoryGroups = function(){	directory.filterGroups('').forEach(function(entity){		var		group 					= ds.Group.find('name = :1' , entity.name);				if(__NNCONFIG.META.GROUPS_DO_NOT_SYNC.indexOf(entity.name) >= 0){			return;		}				if(!group){			group = new ds.Group();		}				group['name'] 			= entity['name'];		group['directoryName'] 	= entity['name'];				try{			group.save();		}catch(e){					}	});	ds.Group.query('name in :1' , __NNCONFIG.META.GROUPS_DO_NOT_SYNC).remove();	ds.Group.forEach(function(entity){		var		group 				= directory.group(entity.name),		groupsToNotSyncArr 	= __NNCONFIG.META.GROUPS_DO_NOT_SYNC;				if(!group){			entity.remove();		}	});}