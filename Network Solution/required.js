function loginHandler(login , password, secondIsAKey){	var	ERRORS			= {		'loginInvalid':{			error		: 10,			errorMessage: "Invalid login"		},		'passwordInvalid': {			error		: 12,			errorMessage: "Invalid password"		},		'notExist': {			error		: 13,			errorMessage: "Login does not exist"		}	},	sessionRef 		= currentSession(),	promoteToken 	= sessionRef.promoteWith("Admin"),	myUser 			= ds.User.find('login = :1 or email = :1', login),	theGroups 		= [];		if (myUser === null) {		myUser = directory.internalStore.User.find('name=:1' , login);				if(myUser != null && directory.computeHA1(login, password) == myUser.password){			var			theGroupsTemp = myUser.groups.toArray('name');						for(var i = 0 ; i<theGroupsTemp.length ; i++){				theGroups.push(theGroupsTemp[i].name);			}						return {				name		: myUser.name,				fullName	: myUser.fullName,				belongsTo	: theGroups,				storage		: {					ID		: myUser.ID				}			}		}	}	else {		if (myUser.passwordIsValid(password, secondIsAKey)) {			var groups = myUser.groupRelations;						if(groups.length){				groups = groups.group;			}			else{				groups = ds.Group.createEntityCollection();			}						groups.forEach(function(group){				theGroups.push(group.name);			});				sessionRef.unPromote(promoteToken);						var connectTime = new Date();			return {				name		: login,				fullName	: myUser.firstname + ' ' + myUser.lastname,				belongsTo	: theGroups,				storage		: {					time		: connectTime,					firstname 	: require("formatting").formatString(myUser.firstname, "c"),					lastname 	: myUser.lastname.toUpperCase(),					ID			: myUser.getKey()				}			}					} else {			return ERRORS.passwordInvalid;		}	}		return ERRORS.notExist;}